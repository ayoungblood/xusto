UNASSIGNED CORE:
greater than: pop a, b; push b > a
less than: pop a, b; push b < a
greater than or equal: pop a, b; push b >= a
less than or equal: pop a, b; push b <= a
user char: get char from stdin; push
user int: get integer from stdin; push
macro: pop a; pop null-terminated string; insert string into function table at index a
halt with return code

UNASSIGNED EXTENDED:
push epoch time
push moon phase
set state flag bit
clear state flag bit
execute: pop a; execute a
ANSI: push ANSI escape string
mersenne: MT random number generation operations
multiply-accumulate:
shift-accumulate:
shift4-accumulate: pop a, b; push (b<<4) + a
conditional XY gate
set bounds

UNASSIGNED DEBUG/DIAG:
print stack
print space
print warp
print bounds
print ip, iv
print portal

UNASSIGNED INTEGER/BIT:
exponent: pop a, b; push a^b
rotate left: pop a; push bitwise left rotate a
rotate right: pop a; push bitwise right rotate a
range: pop a, b; push a, a+1, ..., b-1, b

UNASSIGNED THREAD:
gate: peek a, do not advance iptr until next cell is equal to a
sync: not sure how to implement this, but a way to synchronize two threads would be cool
spawn: create a new thread

UNASSIGNED FLOAT:
float add
float subtract
float multiply
float divide
float abs
float sqrt
float exponent (x^y)
float log (log_y x)
float mod
float greater
float less
float nth root
i to f
f to i
float ceil
float floor
float round
float sin/cos/tan
float sinh/cosh/tanh
float push infinity
nano: pop a, push a * 10^-9
micro: pop a; push a * 10^-6
milli: pop a, push a * 10^-3
kilo: pop a, push a * 10^3
mega: pop a, push a * 10^6
giga: pop a, push a * 10^9
factorial
summation: big-sigma, pop until (0?) and sum
product: big-pi, pop until (0?) and multiply (see U+220F)

UNASSIGNED CONSTANTS:
Euler's e (2.71828...)
Pi (3.141592...)
root 2
Phi
reciprocal fibonacci constant
push speed of light in a vacuum (c)
Newtonian constant of gravity (G)
vacuum permeability (mu0)
vacuum permittivity (epsilon0)
characteristic impedance of vacuum (Z0)
Coulomb's constant (ke)
elementary charge (e)
Avogadro's number (NA)
Faraday constant (F)

(see https://en.wikipedia.org/wiki/List_of_common_physics_notations)
(see https://en.wikipedia.org/wiki/List_of_mathematical_symbols_by_subject)
(see https://en.wikipedia.org/wiki/Mathematical_operators_and_symbols_in_Unicode)

## U+0000 - U+001F: Control codes (Parser instructions)
U+0000 - NUL,   Does nothing
U+0001 - SOH,   <reserved>
U+0002 - STX,   <reserved>
U+0003 - ETX,   (^C) @TODO Stop parsing and exit immediately
U+0004 - EOT,   (^D) @TODO Stop parsing (EOF)
U+0005 - ENQ,   <reserved>
U+0006 - ACK,   <reserved>
U+0007 - BEL,   Whack the parser, causing it to say "OUCH"
U+0008 - BS,    Move write pointer one position leftwards (-x)
U+0009 - HT,    Move write pointer four positions rightwards (+x)
U+000A - LF,    Move write pointer one position downwards and reset left/right (+y, ±x)
U+000B - VT,    Move write pointer one position downwards (+y)
U+000C - FF,    Move write pointer one position into (+z)
U+000D - CR,    Reset the write pointer left/right (±x)
U+000E - SO,    <reserved>
U+000F - SI,    <reserved>
U+0010 - DLE,   <reserved>
U+0011 - DC1,   <reserved> (XON)
U+0012 - DC2,   <reserved>
U+0013 - DC3,   <reserved> (XOFF)
U+0014 - DC4,   <reserved>
U+0015 - NAK,   <reserved>
U+0016 - SYN,   <reserved>
U+0017 - ETB,   <reserved>
U+0018 - CAN,   @TODO Stop parsing and dump (do not execute)
U+0019 - EM,    @TODO Stop parsing (EOF)
U+001A - SUB,   <reserved>
U+001B - ESC,   <reserved>
U+001C - FS,    <reserved>
U+001D - GS,    <reserved>
U+001E - RS,    <reserved>
U+001F - US,    <reserved>

## U+0020 - U+007E: Basic Latin (Core instructions)
U+0020 - SPACE  no-op
U+0021 - !      logical NOT: pop a; push 1 if a == 0, 0 otherwise
U+0022 - "      PUSHCHAR: toggle PUSHCHAR mode
U+0023 - #      drop portal: store ip to portal register
U+0024 - $,
U+0025 - %      modulo: pop a, b; push (b % a)
U+0026 - &      bitwise AND: pop a, b; push (a AND b)
U+0027 - '      lazy print: pop a; print as a character; loop until a == 0
U+0028 - (,
U+0029 - ),
U+002A - *      multiply: pop a, b; push (b * a)
U+002B - +      add: pop a, b; push (b + a)
U+002C - ,,
U+002D - -      subtract: pop a, b; push (b - a)
U+002E - .      out: set iv = (0,0,-1)
U+002F - /      divide: pop a, b; push (b / a)
U+0030 - 0      push 0x00
U+0031 - 1      push 0x01
U+0032 - 2      push 0x02
U+0033 - 3      push 0x03
U+0034 - 4      push 0x04
U+0035 - 5      push 0x05
U+0036 - 6      push 0x06
U+0037 - 7      push 0x07
U+0038 - 8      push 0x08
U+0039 - 9      push 0x09
U+003A - :      duplicate: peek a; push a
U+003B - ;,
U+003C - <      left: set iv = (-1,0,0)
U+003D - =      equality: pop a, b; push 1 if b == a; push 0 otherwise
U+003E - >      right: set iv = (1,0,0)
U+003F - ?,
U+0040 - @      use portal: restore portal register to ip
U+0041 - A,
U+0042 - B      bounce: set iv = (-iv.x,-iv.y,-iv.z)
U+0043 - C,
U+0044 - D,
U+0045 - E,
U+0046 - F      flip: pop a, b, c; push a, b, c
U+0047 - G      get: pop x, y, z; push space(x,y,z)
U+0048 - H      halt: halt program execution and exit
U+0049 - I,
U+004A - J      jump: pop x, y, z; set ip = (x,y,z)
U+004B - K,
U+004C - L,
U+004D - M,
U+004E - N,
U+004F - O,
U+0050 - P,     format print: pop a, b; print a with format from b (???)
U+0051 - Q,
U+0052 - R      jump subroutine: pop x, y, z; push ip.z, ip.y, ip.x; set ip = (x,y,z)
U+0053 - S      set: pop x, y, z, a; set space(x,y,z) = a
U+0054 - T,
U+0055 - U,     unearth: copy n-th stack item to top
U+0056 - V      set vector: pop x, y, z; set iv = (x,y,z)
U+0057 - W      set warp: pop x, y, z; set warp = (x,y,z)
U+0058 - X,
U+0059 - Y,
U+005A - Z,
U+005B - [      print integer: pop i; print i as an integer
U+005C - \      swap: pop a, b; push a; push b
U+005D - ]      print char: pop c; print c as a character
U+005E - ^      up: set iv = (0,1,0)
U+005F - _      trampoline: advance ip twice (skipping next instruction)
U+0060 - `,
U+0061 - a      push 0x0a
U+0062 - b      push 0x0b
U+0063 - c      push 0x0c
U+0064 - d      push 0x0d
U+0065 - e      push 0x0e
U+0066 - f      push 0x0f
U+0067 - g,
U+0068 - h,
U+0069 - i      if, in/out: pop a; if (a), set iv = (0,0,1), else iv = (0,0,-1)
U+006A - j      bitwise XOR: pop a, b; push (a XOR b)
U+006B - k,
U+006C - l      if, left/right: pop a; if (a), set iv = (1,0,0), else iv = (-1,0,0)
U+006D - m,
U+006E - n,
U+006F - o      into: set iv = (0,0,1)
U+0070 - p      pop: pop a; discard a
U+0071 - q,
U+0072 - r,
U+0073 - s,
U+0074 - t,
U+0075 - u      if, up/down: pop a; if (a), set iv = (0,1,0), else iv = (0,-1,0)
U+0076 - v      down: set iv = (0,-1,0)
U+0077 - w,
U+0078 - x      conditional XY rotate: pop a; if (a), rotate iv cw, else rotate iv ccw
U+0079 - y,
U+007A - z,
U+007B - {      peek print integer: peek i; print i as an integer
U+007C - |      bitwise OR: pop a, b; push (a OR b)
U+007D - }      peek print char: peek c; print c as a character
U+007E - ~      bitwise NOT: pop a; push (NOT a)

## U+007F - U+009F: Control codes (Reserved)
...

## U+00A0 - U+00FF: Latin-1 Supplement (Extended instructions)
U+00A0 - NO BREAK SPACE,
U+00A1 - ¡,
U+00A2 - ¢, pop x; sleep for x picocenturies (3156 us or ~pi ms)
U+00A3 - £,
U+00A4 - ¤,
U+00A5 - ¥,
U+00A6 - ¦, math.abs
U+00A7 - §, rotate: pop n; rotate top n stack entries
U+00A8 - ¨,
U+00A9 - ©,
U+00AA - ª,
U+00AB - «, lshift: pop a,b; push a<<b
U+00AC - ¬, not: logical NOT
U+00AD - SOFT HYPHEN,
U+00AE - ®,
U+00AF - ¯,
U+00B0 - °,
U+00B1 - ±, tolerance: pop a, b; push a+b, a-b
U+00B2 - ², square: pop a, push a*a
U+00B3 - ³, cube: pop a, push a*a*a
U+00B4 - ´,
U+00B5 - µ, pop a, push a * 10^-6
U+00B6 - ¶,
U+00B7 - ·, pop a, push 2*a
U+00B8 - ¸,
U+00B9 - ¹, inverse: pop x; push 1/x
U+00BA - º,
U+00BB - », rshift: pop a,b; push a>>b
U+00BC - ¼, pop a, push a/4
U+00BD - ½, pop a, push a/2
U+00BE - ¾, pop a, push 3*a/4
U+00BF - ¿, toggle DEBUG flag
U+00C0 - À,
U+00C1 - Á,
U+00C2 - Â, logical AND
U+00C3 - Ã, logical NAND
U+00C4 - Ä,
U+00C5 - Å,
U+00C6 - Æ,
U+00C7 - Ç,
U+00C8 - È,
U+00C9 - É,
U+00CA - Ê,
U+00CB - Ë,
U+00CC - Ì,
U+00CD - Í,
U+00CE - Î,
U+00CF - Ï,
U+00D0 - Ð,
U+00D1 - Ñ,
U+00D2 - Ò,
U+00D3 - Ó,
U+00D4 - Ô, logical OR
U+00D5 - Õ, logical NOR
U+00D6 - Ö,
U+00D7 - ×,
U+00D8 - Ø,
U+00D9 - Ù,
U+00DA - Ú,
U+00DB - Û,
U+00DC - Ü,
U+00DD - Ý,
U+00DE - Þ,
U+00DF - ß,
U+00E0 - à,
U+00E1 - á,
U+00E2 - â,
U+00E3 - ã,
U+00E4 - ä,
U+00E5 - å,
U+00E6 - æ,
U+00E7 - ç,
U+00E8 - è,
U+00E9 - é,
U+00EA - ê,
U+00EB - ë,
U+00EC - ì,
U+00ED - í,
U+00EE - î,
U+00EF - ï,
U+00F0 - ð,
U+00F1 - ñ,
U+00F2 - ò,
U+00F3 - ó,
U+00F4 - ô,
U+00F5 - õ,
U+00F6 - ö,
U+00F7 - ÷, float divide: pop a,b; push double(a)/double(b)
U+00F8 - ø,
U+00F9 - ù,
U+00FA - ú,
U+00FB - û,
U+00FC - ü,
U+00FD - ý,
U+00FE - þ,
U+00FF - ÿ,

## U+0100 - U+017F: Latin Extended-A (Extended instructions)
U+0174 - Ŵ, whack: Whacks the interpreter, causing it to say "Ouch!"
U+0175 - ŵ, soft whack: Whacks the interpreter softly, causing it to say "ouch"

## U+0180 - U+024F: Latin Extended-B (Extended instructions)

## U+0250 - U+02AF: IPA Extensions (?)

## U+02B0 - U+02FF: Spacing Modifier Letters (?)

## U+0300 - U+036F: Combining Diacritical Marks (?)

## U+0370 - U+03FF: Greek and Coptic (?)

## U+0400 - U+1DFF: various non-Latin alphabets (?)

## U+1E00 - U+1EFF: Latin Extended Additional (Extended instructions)

## U+1F00 - U+1FFF: Greek Extended (Extended instructions)

## U+2000 - U+206F: General Punctuation (Extended instructions)

U+2103 - ℃ degree Celsius:
U+2107 - ℇ Euler-Mascheroni constant: push Euler's constant (~0.5772156649) to available precision
U+2109 - ℉ degree Fahrenheit:
U+210E - ℎ Planck constant: push Planck constant (~6.626070040E-34) to available precision
U+210F - ℏ Planck constant over two Pi: push h-bar (~1.054571800E-34) to available precision
U+2125 - ℥ ounce:
U+2126 - Ω Ohm:
U+212A - K Kelvin:
U+212B - Å Angstrom:
