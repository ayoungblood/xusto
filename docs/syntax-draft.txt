U+0000 - NUL, Does nothing
U+0001 - SOH, <reserved>
U+0002 - STX, <reserved>
U+0003 - ETX, (^C) @TODO Stop parsing and exit immediately
U+0004 - EOT, (^D) @TODO Stop parsing (EOF)
U+0005 - ENQ, <reserved>
U+0006 - ACK, <reserved>
U+0007 - BEL, Whack the parser, causing it to say "OUCH"
U+0008 - BS,  Move write pointer one position leftwards (-x)
U+0009 - HT,  Move write pointer four positions rightwards (+x)
U+000a - LF,  Move write pointer one position downwards and reset left/right (+y, ±x)
U+000b - VT,  Move write pointer one position downwards (+y)
U+000c - FF,  Move write pointer one position into (+z)
U+000d - CR,  Reset the write pointer left/right (±x)
U+000e - SO,  <reserved>
U+000f - SI,  <reserved>
U+0010 - DLE, <reserved>
U+0011 - DC1, <reserved> (XON)
U+0012 - DC2, <reserved>
U+0013 - DC3, <reserved> (XOFF)
U+0014 - DC4, <reserved>
U+0015 - NAK, <reserved>
U+0016 - SYN, <reserved>
U+0017 - ETB, <reserved>
U+0018 - CAN, @TODO Stop parsing and dump (do not execute)
U+0019 - EM,  @TODO Stop parsing (EOF)
U+001a - SUB, <reserved>
U+001b - ESC, <reserved>
U+001c - FS,  <reserved>
U+001d - GS,  <reserved>
U+001e - RS,  <reserved>
U+001f - US,  <reserved>
U+0020 - SPACE, no-op
U+0021 - !, logical not
U+0022 - ", toggle PUSHCHAR mode
U+0023 - #, store iptr (drop portal)
U+0024 - $,
U+0025 - %, pop a, b; push b%a
U+0026 - &, bitwise AND
U+0027 - ', lazy print (pop and print until 0)
U+0028 - (,
U+0029 - ),
U+002a - *, multiply
U+002b - +, add
U+002c - ,,
U+002d - -, subtract
U+002e - ., toward: set ivec to [0,0,-1]
U+002f - /, divide
U+0030 - 0, push 0x00
U+0031 - 1, push 0x01
U+0032 - 2, push 0x02
U+0033 - 3, push 0x03
U+0034 - 4, push 0x04
U+0035 - 5, push 0x05
U+0036 - 6, push 0x06
U+0037 - 7, push 0x07
U+0038 - 8, push 0x08
U+0039 - 9, push 0x09
U+003a - :,
U+003b - ;,
U+003c - <, set ivec to [-1,0,0]
U+003d - =, equality: pop a, b; push a==b
U+003e - >, set ivec to [1,0,0]
U+003f - ?,
U+0040 - @, restore iptr (use portal)
U+0041 - A,
U+0042 - B, bounce: set ivec to [-x,-y,-z]
U+0043 - C,
U+0044 - D, duplicate: peek a; push a
U+0045 - E, pop a,b; push a * 10^b
U+0046 - F,
U+0047 - G, giga: pop a, push a * 10^12
U+0048 - H, (formerly HALT)
U+0049 - I,
U+004a - J,
U+004b - K, branch up/down
U+004c - L,
U+004d - M, mega: pop a, push a * 10^6
U+004e - N,
U+004f - O, branch in/out
U+0050 - P, (formerly pop a)
U+0051 - Q, (formerly 50% chance of teleport)
U+0052 - R,
U+0053 - S,
U+0054 - T, branch right/left
U+0055 - U,
U+0056 - V,
U+0057 - W,
U+0058 - X,
U+0059 - Y,
U+005a - Z,
U+005b - [, pop i, print i as integer
U+005c - \, pop a, b; push a, b (swap)
U+005d - ], pop c, print c as ASCII character
U+005e - ^, set ivec to [0,1,0]
U+005f - _, trampoline: increment iptr by ivec
U+0060 - `, (formerly warp)
U+0061 - a, push 0x0a
U+0062 - b, push 0x0b
U+0063 - c, push 0x0c
U+0064 - d, push 0x0d
U+0065 - e, push 0x0e
U+0066 - f, push 0x0f
U+0067 - g, greater: pop a,b; push a > b
U+0068 - h, halt: orderly halt
U+0069 - i,
U+006a - j,
U+006b - k, kilo: pop a, push a * 10^3
U+006c - l, lesser: pop a,b; push a < b
U+006d - m, micro: pop a, push a * 10^-3
U+006e - n, nano: pop a, push a * 10^-9
U+006f - o, away: set ivec [0,0,1]
U+0070 - p, pop: pop a; discard a
U+0071 - q,
U+0072 - r, retrieve: pop x, y, z, push space[x,y,z]
U+0073 - s, set: pop x, y, z, v, set space[x,y,z] = v
U+0074 - t,
U+0075 - u,
U+0076 - v, down: set ivec to [0,-1,0]
U+0077 - w,
U+0078 - x, set ivec.x
U+0079 - y, set ivec.y
U+007a - z, set ivec.z
U+007b - {, peek i, print i as integer
U+007c - |, bitwise OR
U+007d - }, peek c, print c
U+007e - ~: bitwise NOT
U+007f - 0x009f <control>, reserved
0x
U+00a0 - NO BREAK SPACE
U+00a1 - ¡,
U+00a2 - ¢, pop x; sleep for x picocenturies (3.156 ms)
U+00a3 - £
U+00a4 - ¤
U+00a5 - ¥
U+00a6 - ¦: math.abs
U+00a7 - §: rotate: pop n; rotate top n stack entries
U+00a8 - ¨
U+00a9 - ©
U+00aa - ª
U+00ab - «: lshift: pop a,b; push a<<b
U+00ac - ¬: not: logical NOT
U+00ad - SOFT HYPHEN
U+00ae - ®
U+00af - ¯
U+00b0 - °
U+00b1 - ±: tolerance: pop a,b; push a+b, a-b
U+00b2 - ², pop a, push a*a
U+00b3 - ³, pop a, push a*a*a
U+00b4 - ´
U+00b5 - µ, pop a, push a * 10^-6
U+00b6 - ¶
U+00b7 - ·: pop a, push 2*a
U+00b8 - ¸
U+00b9 - ¹: inverse: pop x; push 1/x
U+00ba - º:
U+00bb - » rshift: pop a,b; push a>>b
U+00bc - ¼, pop a, push a/4
U+00bd - ½, pop a, push a/2
U+00be - ¾, pop a, push 3*a/4
U+00bf - ¿, toggle DEBUG flag
U+00c0 - À
U+00c1 - Á
U+00c2 - Â: logical AND
U+00c3 - Ã: logical NAND
U+00c4 - Ä
U+00c5 - Å
U+00c6 - Æ
U+00c7 - Ç
U+00c8 - È
U+00c9 - É
U+00ca - Ê
U+00cb - Ë
U+00cc - Ì
U+00cd - Í
U+00ce - Î
U+00cf - Ï
U+00d0 - Ð
U+00d1 - Ñ
U+00d2 - Ò
U+00d3 - Ó
U+00d4 - Ô: logical OR
U+00d5 - Õ: logical NOR
U+00d6 - Ö
U+00d7 - ×
U+00d8 - Ø
U+00d9 - Ù
U+00da - Ú
U+00db - Û
U+00dc - Ü
U+00dd - Ý
U+00de - Þ
U+00df - ß
U+00e0 - à
U+00e1 - á
U+00e2 - â
U+00e3 - ã
U+00e4 - ä
U+00e5 - å
U+00e6 - æ
U+00e7 - ç
U+00e8 - è
U+00e9 - é
U+00ea - ê
U+00eb - ë
U+00ec - ì
U+00ed - í
U+00ee - î
U+00ef - ï
U+00f0 - ð
U+00f1 - ñ
U+00f2 - ò
U+00f3 - ó
U+00f4 - ô
U+00f5 - õ
U+00f6 - ö
U+00f7 - ÷: float divide: pop a,b; push double(a)/double(b)
U+00f8 - ø
U+00f9 - ù
U+00fa - ú
U+00fb - û
U+00fc - ü
U+00fd - ý
U+00fe - þ
U+00ff - ÿ

UNASSIGNED:
push e (2.71828)
